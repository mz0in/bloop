# Stage 1: Build the frontend
FROM node AS frontend

WORKDIR /build
COPY package.json package-lock.json ./
RUN npm ci
COPY apps/ apps
COPY client/ client
COPY playwright.config.js .
RUN npm run build-web

# Stage 2: Build the Rust binary
FROM rust:1.73-slim-bookworm as builder

# Limit Cargo's parallelism to save memory
ENV CARGO_BUILD_JOBS=1

WORKDIR /build
RUN apt-get update && \
    apt-get -y install make clang libc-dev curl cmake python3 protobuf-compiler pkg-config libssl3 libssl-dev git && \
    rm -rf /var/lib/apt/lists/*

COPY server server
COPY apps/desktop/src-tauri apps/desktop/src-tauri
COPY Cargo.lock Cargo.toml .

# Build the Rust project
RUN cargo --locked build --bin bleep --release && \
    cp /build/target/release/bleep / && \
    mkdir /dylib && \
    cp /build/target/release/libonnxruntime.so /dylib/

# Stage 3: Prepare the final image
FROM debian:bookworm-slim

VOLUME ["/repos", "/data"]

RUN apt-get update && \
    apt-get -y install openssl ca-certificates libprotobuf-lite32 && \
    rm -rf /var/lib/apt/lists/*

COPY model /model
COPY --from=builder /bleep /
COPY --from=builder /dylib /dylib
COPY --from=frontend /build/client/dist /frontend

ARG OPENAI_API_KEY
ARG GITHUB_ACCESS_TOKEN

ENTRYPOINT ["/bleep", "--host=0.0.0.0", "--source-dir=/repos", "--index-dir=/data", "--model-dir=/model", "--dylib-dir=/dylib", "--disable-log-write", "--frontend-dist=/frontend", "--openai-api-key=$OPENAI_API_KEY", "--github-access-token=$GITHUB_ACCESS_TOKEN"]
