# Frontend build stage
FROM node:16 AS frontend
WORKDIR /build
COPY package.json package-lock.json ./
RUN npm ci --no-optional
COPY apps/ apps
COPY client/ client
COPY playwright.config.js .
RUN npm run build-web

# Rust build stage
FROM rust:1.73-slim-bookworm as builder
WORKDIR /build

# Install dependencies (without sccache to save space)
RUN apt-get update && \
    apt-get -y install --no-install-recommends make clang libc-dev cmake python3 protobuf-compiler pkg-config libssl-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHON /usr/bin/python3
ENV CC /usr/bin/clang
ENV CXX /usr/bin/clang++
ENV CARGO_BUILD_JOBS=1

# Copy source files
COPY server server
COPY apps/desktop/src-tauri apps/desktop/src-tauri
COPY Cargo.lock Cargo.toml .

# Build the project
RUN cargo --locked build --bin bleep --release && \
    cp /build/target/release/bleep / && \
    mkdir /dylib && \
    cp /build/target/release/libonnxruntime.so /dylib/

# Final stage
FROM debian:bookworm-slim

# Create volumes
VOLUME ["/repos", "/data"]

# Install runtime dependencies
RUN apt-get update && \
    apt-get -y install --no-install-recommends openssl ca-certificates libprotobuf-lite32 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy files from previous stages
COPY model /model
COPY --from=builder /bleep /
COPY --from=builder /dylib /dylib
COPY --from=frontend /build/client/dist /frontend

# Set environment variables for API keys
ARG OPENAI_API_KEY
ARG GITHUB_ACCESS_TOKEN

# Set the entrypoint
ENTRYPOINT ["/bleep", \
    "--host=0.0.0.0", \
    "--source-dir=/repos", \
    "--index-dir=/data", \
    "--model-dir=/model", \
    "--dylib-dir=/dylib", \
    "--disable-log-write", \
    "--frontend-dist=/frontend", \
    "--openai-api-key=$OPENAI_API_KEY", \
    "--github-access-token=$GITHUB_ACCESS_TOKEN"]
